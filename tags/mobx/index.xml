<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Mobx on Icy Gao&#39;s Blog</title>
        <link>https://js0205.github.io/tags/mobx/</link>
        <description>Recent content in Mobx on Icy Gao&#39;s Blog</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <lastBuildDate>Thu, 08 Dec 2022 22:48:15 +0800</lastBuildDate><atom:link href="https://js0205.github.io/tags/mobx/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Mobx的使用和原则</title>
        <link>https://js0205.github.io/p/mobx%E7%9A%84%E4%BD%BF%E7%94%A8%E5%92%8C%E5%8E%9F%E5%88%99/</link>
        <pubDate>Thu, 08 Dec 2022 22:48:15 +0800</pubDate>
        
        <guid>https://js0205.github.io/p/mobx%E7%9A%84%E4%BD%BF%E7%94%A8%E5%92%8C%E5%8E%9F%E5%88%99/</guid>
        <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;项目中接触到了mobx，因此记录一下对mobx的使用和理解&lt;/p&gt;
&lt;h2 id=&#34;常用api&#34;&gt;常用API&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;创建observable&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;makeObservable&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;用法：makeObservable(target, annotations?, options?)&lt;/p&gt;
&lt;p&gt;属性、整个对象、数组、Maps和Sets都可以被转化成observale&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Actions&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Action就是任何一段修改状态的代码&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;runInAction&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;用法：runInAction(fn)&lt;/p&gt;
&lt;p&gt;创建一个被立即调用的一次性action&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;与React的整合&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;来自mobx-react或mobx-react-lite包&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;observer&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;用法：observer(component)&lt;/p&gt;
&lt;p&gt;一个高阶组件，可用来在observerable发生改变时将一个React函数组件或类组件重新渲染&lt;/p&gt;
&lt;h2 id=&#34;原则&#34;&gt;原则&lt;/h2&gt;
&lt;p&gt;Mobx使用&lt;strong&gt;单向数据流&lt;/strong&gt;，利用action改变state，进而更新所有受影响的view&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://js0205.github.io/p/mobx%E7%9A%84%E4%BD%BF%E7%94%A8%E5%92%8C%E5%8E%9F%E5%88%99/image1.png&#34;
	width=&#34;2064&#34;
	height=&#34;225&#34;
	srcset=&#34;https://js0205.github.io/p/mobx%E7%9A%84%E4%BD%BF%E7%94%A8%E5%92%8C%E5%8E%9F%E5%88%99/image1_hu743ce7e2f42fb02b83fb420a26ab8dbe_417958_480x0_resize_box_3.png 480w, https://js0205.github.io/p/mobx%E7%9A%84%E4%BD%BF%E7%94%A8%E5%92%8C%E5%8E%9F%E5%88%99/image1_hu743ce7e2f42fb02b83fb420a26ab8dbe_417958_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;917&#34;
		data-flex-basis=&#34;2201px&#34;
	
&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;所有的derivations将在state改变时&lt;strong&gt;自动且原子化地更新&lt;/strong&gt;。因此不可能观察中间值&lt;/li&gt;
&lt;li&gt;所有的derivations默认将会&lt;strong&gt;同步&lt;/strong&gt;更新，这意味着action可以在state改变之后安全的直接获得computed值&lt;/li&gt;
&lt;li&gt;computed value的更新是&lt;strong&gt;惰性&lt;/strong&gt;的，任何computed value在需要他们的副作用发生之前都是不激活的&lt;/li&gt;
&lt;li&gt;所有的computed value都应是纯函数，他们不应该修改state&lt;/li&gt;
&lt;/ol&gt;
</description>
        </item>
        
    </channel>
</rss>
